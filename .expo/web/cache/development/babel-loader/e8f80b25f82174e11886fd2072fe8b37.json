{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatButton from \"../ui/FlatButton\";\nimport AuthForm from \"./AuthForm\";\nimport { Colors } from \"../../constants/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction AuthContent(_ref) {\n  var isLogin = _ref.isLogin,\n      onAuthenticate = _ref.onAuthenticate;\n\n  var _useState = useState({\n    email: false,\n    password: false,\n    confirmEmail: false,\n    confirmPassword: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      credentialsInvalid = _useState2[0],\n      setCredentialsInvalid = _useState2[1];\n\n  function switchAuthModeHandler() {}\n\n  function submitHandler(credentials) {\n    var email = credentials.email,\n        confirmEmail = credentials.confirmEmail,\n        password = credentials.password,\n        confirmPassword = credentials.confirmPassword;\n    email = email.trim();\n    password = password.trim();\n    var emailIsValid = email.includes('@');\n    var passwordIsValid = password.length > 6;\n    var emailsAreEqual = email === confirmEmail;\n    var passwordsAreEqual = password === confirmPassword;\n\n    if (!emailIsValid || !passwordIsValid || !isLogin && (!emailsAreEqual || !passwordsAreEqual)) {\n      Alert.alert('Invalid input', 'Please check your entered credentials.');\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        confirmEmail: !emailIsValid || !emailsAreEqual,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual\n      });\n      return;\n    }\n\n    onAuthenticate({\n      email: email,\n      password: password\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.authContent,\n    children: [_jsx(AuthForm, {\n      isLogin: isLogin,\n      onSubmit: submitHandler,\n      credentialsInvalid: credentialsInvalid\n    }), _jsx(View, {\n      style: styles.buttons,\n      children: _jsx(FlatButton, {\n        onPress: switchAuthModeHandler,\n        children: isLogin ? 'Create a new user' : 'Log in instead'\n      })\n    })]\n  });\n}\n\nexport default AuthContent;\nvar styles = StyleSheet.create({\n  authContent: {\n    marginTop: 64,\n    marginHorizontal: 32,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.primary800,\n    elevation: 2,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 1,\n      height: 1\n    },\n    shadowOpacity: 0.35,\n    shadowRadius: 4\n  },\n  buttons: {\n    marginTop: 8\n  }\n});","map":{"version":3,"sources":["/home/user/Documents/Workspace/Mobile/react-native-authentication/components/Auth/AuthContent.js"],"names":["useState","FlatButton","AuthForm","Colors","AuthContent","isLogin","onAuthenticate","email","password","confirmEmail","confirmPassword","credentialsInvalid","setCredentialsInvalid","switchAuthModeHandler","submitHandler","credentials","trim","emailIsValid","includes","passwordIsValid","length","emailsAreEqual","passwordsAreEqual","Alert","alert","styles","authContent","buttons","StyleSheet","create","marginTop","marginHorizontal","padding","borderRadius","backgroundColor","primary800","elevation","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { Alert, StyleSheet, View } from 'react-native';\n\nimport FlatButton from '../ui/FlatButton';\nimport AuthForm from './AuthForm';\nimport { Colors } from '../../constants/styles';\n\nfunction AuthContent({ isLogin, onAuthenticate }) {\n\n  const [credentialsInvalid, setCredentialsInvalid] = useState({\n    email: false,\n    password: false,\n    confirmEmail: false,\n    confirmPassword: false,\n  });\n\n  function switchAuthModeHandler() {\n    // Todo\n  }\n\n  function submitHandler(credentials) {\n    let { email, confirmEmail, password, confirmPassword } = credentials;\n\n    email = email.trim();\n    password = password.trim();\n\n    const emailIsValid = email.includes('@');\n    const passwordIsValid = password.length > 6;\n    const emailsAreEqual = email === confirmEmail;\n    const passwordsAreEqual = password === confirmPassword;\n\n    if (\n      !emailIsValid ||\n      !passwordIsValid ||\n      (!isLogin && (!emailsAreEqual || !passwordsAreEqual))\n    ) {\n      Alert.alert('Invalid input', 'Please check your entered credentials.');\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        confirmEmail: !emailIsValid || !emailsAreEqual,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual,\n      });\n      return;\n    }\n    onAuthenticate({ email, password });\n  }\n\n  return (\n    <View style={styles.authContent}>\n      <AuthForm\n        isLogin={isLogin}\n        onSubmit={submitHandler}\n        credentialsInvalid={credentialsInvalid}\n      />\n      <View style={styles.buttons}>\n        <FlatButton onPress={switchAuthModeHandler}>\n          {isLogin ? 'Create a new user' : 'Log in instead'}\n        </FlatButton>\n      </View>\n    </View>\n  );\n}\n\nexport default AuthContent;\n\nconst styles = StyleSheet.create({\n  authContent: {\n    marginTop: 64,\n    marginHorizontal: 32,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.primary800,\n    elevation: 2,\n    shadowColor: 'black',\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.35,\n    shadowRadius: 4,\n  },\n  buttons: {\n    marginTop: 8,\n  },\n});"]},"metadata":{},"sourceType":"module"}