{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../ui/Button\";\nimport Input from \"./Input\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction AuthForm(_ref) {\n  var isLogin = _ref.isLogin,\n      onSubmit = _ref.onSubmit,\n      credentialsInvalid = _ref.credentialsInvalid;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredEmail = _useState2[0],\n      setEnteredEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      enteredConfirmEmail = _useState4[0],\n      setEnteredConfirmEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      enteredPassword = _useState6[0],\n      setEnteredPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      enteredConfirmPassword = _useState8[0],\n      setEnteredConfirmPassword = _useState8[1];\n\n  var emailIsInvalid = credentialsInvalid.email,\n      emailsDontMatch = credentialsInvalid.confirmEmail,\n      passwordIsInvalid = credentialsInvalid.password,\n      passwordsDontMatch = credentialsInvalid.confirmPassword;\n\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case 'email':\n        setEnteredEmail(enteredValue);\n        break;\n\n      case 'confirmEmail':\n        setEnteredConfirmEmail(enteredValue);\n        break;\n\n      case 'password':\n        setEnteredPassword(enteredValue);\n        break;\n\n      case 'confirmPassword':\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword\n    });\n  }\n\n  return _jsx(View, {\n    style: styles.form,\n    children: _jsxs(View, {\n      children: [_jsx(Input, {\n        label: \"Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'email'),\n        value: enteredEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmEmail'),\n        value: enteredConfirmEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailsDontMatch\n      }), _jsx(Input, {\n        label: \"Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'password'),\n        secure: true,\n        value: enteredPassword,\n        isInvalid: passwordIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmPassword'),\n        secure: true,\n        value: enteredConfirmPassword,\n        isInvalid: passwordsDontMatch\n      }), _jsx(View, {\n        style: styles.buttons,\n        children: _jsx(Button, {\n          onPress: submitHandler,\n          children: isLogin ? 'Log In' : 'Sign Up'\n        })\n      })]\n    })\n  });\n}\n\nexport default AuthForm;\nvar styles = StyleSheet.create({\n  buttons: {\n    marginTop: 12\n  }\n});","map":{"version":3,"sources":["/home/user/Documents/Workspace/Mobile/react-native-authentication/components/Auth/AuthForm.js"],"names":["useState","Button","Input","AuthForm","isLogin","onSubmit","credentialsInvalid","enteredEmail","setEnteredEmail","enteredConfirmEmail","setEnteredConfirmEmail","enteredPassword","setEnteredPassword","enteredConfirmPassword","setEnteredConfirmPassword","emailIsInvalid","email","emailsDontMatch","confirmEmail","passwordIsInvalid","password","passwordsDontMatch","confirmPassword","updateInputValueHandler","inputType","enteredValue","submitHandler","styles","form","bind","buttons","StyleSheet","create","marginTop"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport Button from '../ui/Button';\nimport Input from './Input';\n\nfunction AuthForm({ isLogin, onSubmit, credentialsInvalid }) {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredConfirmEmail, setEnteredConfirmEmail] = useState('');\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState('');\n\n  const {\n    email: emailIsInvalid,\n    confirmEmail: emailsDontMatch,\n    password: passwordIsInvalid,\n    confirmPassword: passwordsDontMatch,\n  } = credentialsInvalid;\n\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case 'email':\n        setEnteredEmail(enteredValue);\n        break;\n      case 'confirmEmail':\n        setEnteredConfirmEmail(enteredValue);\n        break;\n      case 'password':\n        setEnteredPassword(enteredValue);\n        break;\n      case 'confirmPassword':\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword,\n    });\n  }\n\n  return (\n    <View style={styles.form}>\n      <View>\n        <Input\n          label=\"Email Address\"\n          onUpdateValue={updateInputValueHandler.bind(this, 'email')}\n          value={enteredEmail}\n          keyboardType=\"email-address\"\n          isInvalid={emailIsInvalid}\n        />\n        {!isLogin && (\n          <Input\n            label=\"Confirm Email Address\"\n            onUpdateValue={updateInputValueHandler.bind(this, 'confirmEmail')}\n            value={enteredConfirmEmail}\n            keyboardType=\"email-address\"\n            isInvalid={emailsDontMatch}\n          />\n        )}\n        <Input\n          label=\"Password\"\n          onUpdateValue={updateInputValueHandler.bind(this, 'password')}\n          secure\n          value={enteredPassword}\n          isInvalid={passwordIsInvalid}\n        />\n        {!isLogin && (\n          <Input\n            label=\"Confirm Password\"\n            onUpdateValue={updateInputValueHandler.bind(\n              this,\n              'confirmPassword'\n            )}\n            secure\n            value={enteredConfirmPassword}\n            isInvalid={passwordsDontMatch}\n          />\n        )}\n        <View style={styles.buttons}>\n          <Button onPress={submitHandler}>\n            {isLogin ? 'Log In' : 'Sign Up'}\n          </Button>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nexport default AuthForm;\n\nconst styles = StyleSheet.create({\n  buttons: {\n    marginTop: 12,\n  },\n});"]},"metadata":{},"sourceType":"module"}